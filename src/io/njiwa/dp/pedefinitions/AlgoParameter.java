/*
 * Kasuku - Open Source eUICC Remote Subscription Management Server
 * 
 * 
 * Copyright (C) 2019 - , Digital Solutions Ltd. - http://www.dsmagic.com
 *
 * Paul Bagyenda <bagyenda@dsmagic.com>
 * 
 * This program is free software, distributed under the terms of
 * the GNU General Public License.
 */ 

/**
 * This class file was automatically generated by jASN1 v1.6.0 (http://www.openmuc.org)
 */

package io.njiwa.dp.pedefinitions;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jasn1.ber.BerIdentifier;
import org.openmuc.jasn1.ber.BerLength;
import org.openmuc.jasn1.ber.types.BerInteger;
import org.openmuc.jasn1.ber.types.BerOctetString;

import java.io.IOException;
import java.io.InputStream;


public class AlgoParameter {

	public static final BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	private BerInteger algorithmID = null;

	private BerOctetString algorithmOptions = null;

	private BerOctetString key = null;

	private BerOctetString opc = null;

	private BerOctetString rotationConstants = null;

	private BerOctetString xoringConstants = null;

	private BerOctetString authCounterMax = null;

	public AlgoParameter() {
		id = identifier;
	}

	public AlgoParameter(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public void setAlgorithmID(BerInteger algorithmID) {
		this.algorithmID = algorithmID;
	}

	public BerInteger getAlgorithmID() {
		return algorithmID;
	}

	public void setAlgorithmOptions(BerOctetString algorithmOptions) {
		this.algorithmOptions = algorithmOptions;
	}

	public BerOctetString getAlgorithmOptions() {
		return algorithmOptions;
	}

	public void setKey(BerOctetString key) {
		this.key = key;
	}

	public BerOctetString getKey() {
		return key;
	}

	public void setOpc(BerOctetString opc) {
		this.opc = opc;
	}

	public BerOctetString getOpc() {
		return opc;
	}

	public void setRotationConstants(BerOctetString rotationConstants) {
		this.rotationConstants = rotationConstants;
	}

	public BerOctetString getRotationConstants() {
		return rotationConstants;
	}

	public void setXoringConstants(BerOctetString xoringConstants) {
		this.xoringConstants = xoringConstants;
	}

	public BerOctetString getXoringConstants() {
		return xoringConstants;
	}

	public void setAuthCounterMax(BerOctetString authCounterMax) {
		this.authCounterMax = authCounterMax;
	}

	public BerOctetString getAuthCounterMax() {
		return authCounterMax;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			if (authCounterMax != null) {
				codeLength += authCounterMax.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 6
				os.write(0x86);
				codeLength += 1;
			}
			
			if (xoringConstants != null) {
				codeLength += xoringConstants.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 5
				os.write(0x85);
				codeLength += 1;
			}
			
			if (rotationConstants != null) {
				codeLength += rotationConstants.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 4
				os.write(0x84);
				codeLength += 1;
			}
			
			codeLength += opc.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			os.write(0x83);
			codeLength += 1;
			
			codeLength += key.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			os.write(0x82);
			codeLength += 1;
			
			codeLength += algorithmOptions.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			os.write(0x81);
			codeLength += 1;
			
			codeLength += algorithmID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			os.write(0x80);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 0)) {
			algorithmID = new BerInteger();
			subCodeLength += algorithmID.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 1)) {
			algorithmOptions = new BerOctetString();
			subCodeLength += algorithmOptions.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 2)) {
			key = new BerOctetString();
			subCodeLength += key.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 3)) {
			opc = new BerOctetString();
			subCodeLength += opc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 4)) {
			rotationConstants = new BerOctetString();
			subCodeLength += rotationConstants.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 5)) {
			xoringConstants = new BerOctetString();
			subCodeLength += xoringConstants.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 6)) {
			authCounterMax = new BerOctetString();
			subCodeLength += authCounterMax.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		sb.append("algorithmID: ").append(algorithmID);
		
		sb.append(", ");
		sb.append("algorithmOptions: ").append(algorithmOptions);
		
		sb.append(", ");
		sb.append("key: ").append(key);
		
		sb.append(", ");
		sb.append("opc: ").append(opc);
		
		if (rotationConstants != null) {
			sb.append(", ");
			sb.append("rotationConstants: ").append(rotationConstants);
		}
		
		if (xoringConstants != null) {
			sb.append(", ");
			sb.append("xoringConstants: ").append(xoringConstants);
		}
		
		if (authCounterMax != null) {
			sb.append(", ");
			sb.append("authCounterMax: ").append(authCounterMax);
		}
		
		sb.append("}");
		return sb.toString();
	}

}

