/*
 * Njiwa Open Source Embedded M2M UICC Remote Subscription Manager
 * 
 * 
 * Copyright (C) 2019 - , Digital Solutions Ltd. - http://www.dsmagic.com
 *
 * Njiwa Dev <dev@njiwa.io>
 * 
 * This program is free software, distributed under the terms of
 * the GNU General Public License.
 */ 

/**
 * This class file was automatically generated by jASN1 v1.6.0 (http://www.openmuc.org)
 */

package io.njiwa.dp.pedefinitions;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jasn1.ber.BerIdentifier;
import org.openmuc.jasn1.ber.BerLength;
import org.openmuc.jasn1.ber.types.BerOctetString;

import java.io.IOException;
import java.io.InputStream;


public class ApplicationLoadPackage {

	public static final BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	private ApplicationIdentifier loadPackageAID = null;

	private ApplicationIdentifier securityDomainAID = null;

	private BerOctetString nonVolatileCodeLimitC6 = null;

	private BerOctetString volatileDataLimitC7 = null;

	private BerOctetString nonVolatileDataLimitC8 = null;

	private BerOctetString hashValue = null;

	private BerOctetString loadBlockObject = null;

	public ApplicationLoadPackage() {
		id = identifier;
	}

	public ApplicationLoadPackage(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public void setLoadPackageAID(ApplicationIdentifier loadPackageAID) {
		this.loadPackageAID = loadPackageAID;
	}

	public ApplicationIdentifier getLoadPackageAID() {
		return loadPackageAID;
	}

	public void setSecurityDomainAID(ApplicationIdentifier securityDomainAID) {
		this.securityDomainAID = securityDomainAID;
	}

	public ApplicationIdentifier getSecurityDomainAID() {
		return securityDomainAID;
	}

	public void setNonVolatileCodeLimitC6(BerOctetString nonVolatileCodeLimitC6) {
		this.nonVolatileCodeLimitC6 = nonVolatileCodeLimitC6;
	}

	public BerOctetString getNonVolatileCodeLimitC6() {
		return nonVolatileCodeLimitC6;
	}

	public void setVolatileDataLimitC7(BerOctetString volatileDataLimitC7) {
		this.volatileDataLimitC7 = volatileDataLimitC7;
	}

	public BerOctetString getVolatileDataLimitC7() {
		return volatileDataLimitC7;
	}

	public void setNonVolatileDataLimitC8(BerOctetString nonVolatileDataLimitC8) {
		this.nonVolatileDataLimitC8 = nonVolatileDataLimitC8;
	}

	public BerOctetString getNonVolatileDataLimitC8() {
		return nonVolatileDataLimitC8;
	}

	public void setHashValue(BerOctetString hashValue) {
		this.hashValue = hashValue;
	}

	public BerOctetString getHashValue() {
		return hashValue;
	}

	public void setLoadBlockObject(BerOctetString loadBlockObject) {
		this.loadBlockObject = loadBlockObject;
	}

	public BerOctetString getLoadBlockObject() {
		return loadBlockObject;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			codeLength += loadBlockObject.encode(os, false);
			// write tag: PRIVATE_CLASS, PRIMITIVE, 4
			os.write(0xc4);
			codeLength += 1;
			
			if (hashValue != null) {
				codeLength += hashValue.encode(os, false);
				// write tag: PRIVATE_CLASS, PRIMITIVE, 1
				os.write(0xc1);
				codeLength += 1;
			}
			
			if (nonVolatileDataLimitC8 != null) {
				codeLength += nonVolatileDataLimitC8.encode(os, false);
				// write tag: PRIVATE_CLASS, PRIMITIVE, 8
				os.write(0xc8);
				codeLength += 1;
			}
			
			if (volatileDataLimitC7 != null) {
				codeLength += volatileDataLimitC7.encode(os, false);
				// write tag: PRIVATE_CLASS, PRIMITIVE, 7
				os.write(0xc7);
				codeLength += 1;
			}
			
			if (nonVolatileCodeLimitC6 != null) {
				codeLength += nonVolatileCodeLimitC6.encode(os, false);
				// write tag: PRIVATE_CLASS, PRIMITIVE, 6
				os.write(0xc6);
				codeLength += 1;
			}
			
			if (securityDomainAID != null) {
				codeLength += securityDomainAID.encode(os, false);
				// write tag: APPLICATION_CLASS, PRIMITIVE, 15
				os.write(0x4f);
				codeLength += 1;
			}
			
			codeLength += loadPackageAID.encode(os, false);
			// write tag: APPLICATION_CLASS, PRIMITIVE, 15
			os.write(0x4f);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(BerIdentifier.APPLICATION_CLASS, BerIdentifier.PRIMITIVE, 15)) {
			loadPackageAID = new ApplicationIdentifier();
			subCodeLength += loadPackageAID.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.APPLICATION_CLASS, BerIdentifier.PRIMITIVE, 15)) {
			securityDomainAID = new ApplicationIdentifier();
			subCodeLength += securityDomainAID.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.PRIMITIVE, 6)) {
			nonVolatileCodeLimitC6 = new BerOctetString();
			subCodeLength += nonVolatileCodeLimitC6.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.PRIMITIVE, 7)) {
			volatileDataLimitC7 = new BerOctetString();
			subCodeLength += volatileDataLimitC7.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.PRIMITIVE, 8)) {
			nonVolatileDataLimitC8 = new BerOctetString();
			subCodeLength += nonVolatileDataLimitC8.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.PRIMITIVE, 1)) {
			hashValue = new BerOctetString();
			subCodeLength += hashValue.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.PRIMITIVE, 4)) {
			loadBlockObject = new BerOctetString();
			subCodeLength += loadBlockObject.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		sb.append("loadPackageAID: ").append(loadPackageAID);
		
		if (securityDomainAID != null) {
			sb.append(", ");
			sb.append("securityDomainAID: ").append(securityDomainAID);
		}
		
		if (nonVolatileCodeLimitC6 != null) {
			sb.append(", ");
			sb.append("nonVolatileCodeLimitC6: ").append(nonVolatileCodeLimitC6);
		}
		
		if (volatileDataLimitC7 != null) {
			sb.append(", ");
			sb.append("volatileDataLimitC7: ").append(volatileDataLimitC7);
		}
		
		if (nonVolatileDataLimitC8 != null) {
			sb.append(", ");
			sb.append("nonVolatileDataLimitC8: ").append(nonVolatileDataLimitC8);
		}
		
		if (hashValue != null) {
			sb.append(", ");
			sb.append("hashValue: ").append(hashValue);
		}
		
		sb.append(", ");
		sb.append("loadBlockObject: ").append(loadBlockObject);
		
		sb.append("}");
		return sb.toString();
	}

}

