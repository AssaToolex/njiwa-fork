/*
 * Njiwa Open Source Embedded M2M UICC Remote Subscription Manager
 * 
 * 
 * Copyright (C) 2019 - , Digital Solutions Ltd. - http://www.dsmagic.com
 *
 * Njiwa Dev <dev@njiwa.io>
 * 
 * This program is free software, distributed under the terms of
 * the GNU General Public License.
 */ 

/**
 * This class file was automatically generated by jASN1 v1.6.0 (http://www.openmuc.org)
 */

package io.njiwa.dp.pedefinitions;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jasn1.ber.BerIdentifier;
import org.openmuc.jasn1.ber.BerLength;
import org.openmuc.jasn1.ber.types.BerOctetString;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;


public class PEAKAParameter {

	public static class AlgoConfiguration {

		public byte[] code = null;
		private MappingParameter mappingParameter = null;

		private AlgoParameter algoParameter = null;

		public AlgoConfiguration() {
		}

		public AlgoConfiguration(byte[] code) {
			this.code = code;
		}

		public void setMappingParameter(MappingParameter mappingParameter) {
			this.mappingParameter = mappingParameter;
		}

		public MappingParameter getMappingParameter() {
			return mappingParameter;
		}

		public void setAlgoParameter(AlgoParameter algoParameter) {
			this.algoParameter = algoParameter;
		}

		public AlgoParameter getAlgoParameter() {
			return algoParameter;
		}

		public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {
			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				return code.length;

			}
			int codeLength = 0;
			if (algoParameter != null) {
				codeLength += algoParameter.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				os.write(0xa1);
				codeLength += 1;
				return codeLength;

			}
			
			if (mappingParameter != null) {
				codeLength += mappingParameter.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				os.write(0xa0);
				codeLength += 1;
				return codeLength;

			}
			
			throw new IOException("Error encoding BerChoice: No item in choice was selected.");
		}

		public int decode(InputStream is, BerIdentifier berIdentifier) throws IOException {
			int codeLength = 0;
			BerIdentifier passedIdentifier = berIdentifier;

			if (berIdentifier == null) {
				berIdentifier = new BerIdentifier();
				codeLength += berIdentifier.decode(is);
			}

			BerLength length = new BerLength();
			if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 0)) {
				mappingParameter = new MappingParameter();
				codeLength += mappingParameter.decode(is, false);
				return codeLength;
			}

			if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 1)) {
				algoParameter = new AlgoParameter();
				codeLength += algoParameter.decode(is, false);
				return codeLength;
			}

			if (passedIdentifier != null) {
				return 0;
			}
			throw new IOException("Error decoding BerChoice: Identifier matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			if ( mappingParameter!= null) {
				return "CHOICE{mappingParameter: " + mappingParameter + "}";
			}

			if ( algoParameter!= null) {
				return "CHOICE{algoParameter: " + algoParameter + "}";
			}

			return "unknown";
		}

	}

	public static class SqnInit {

		public static final BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
		protected BerIdentifier id;

		public byte[] code = null;
		private List<BerOctetString> seqOf = null;

		public SqnInit() {
			id = identifier;
			seqOf = new ArrayList<BerOctetString>();
		}

		public SqnInit(byte[] code) {
			id = identifier;
			this.code = code;
		}

		public List<BerOctetString> getBerOctetString() {
			if (seqOf == null) {
				seqOf = new ArrayList<BerOctetString>();
			}
			return seqOf;
		}

		public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {
			int codeLength;

			if (code != null) {
				codeLength = code.length;
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
			}
			else {
				codeLength = 0;
				for (int i = (seqOf.size() - 1); i >= 0; i--) {
					codeLength += seqOf.get(i).encode(os, true);
				}

				codeLength += BerLength.encodeLength(os, codeLength);

			}

			if (explicit) {
				codeLength += id.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is, boolean explicit) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerIdentifier berIdentifier = new BerIdentifier();
			if (explicit) {
				codeLength += id.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				BerOctetString element = new BerOctetString();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("SEQUENCE OF{");

			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<BerOctetString> it = seqOf.iterator();
				if (it.hasNext()) {
					sb.append(it.next());
					while (it.hasNext()) {
						sb.append(", ").append(it.next());
					}
				}
			}

			sb.append("}");

			return sb.toString();
		}

	}

	public static final BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	private PEHeader akaHeader = null;

	private AlgoConfiguration algoConfiguration = null;

	private BerOctetString sqnOptions = null;

	private BerOctetString sqnDelta = null;

	private BerOctetString sqnAgeLimit = null;

	private SqnInit sqnInit = null;

	public PEAKAParameter() {
		id = identifier;
	}

	public PEAKAParameter(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public void setAkaHeader(PEHeader akaHeader) {
		this.akaHeader = akaHeader;
	}

	public PEHeader getAkaHeader() {
		return akaHeader;
	}

	public void setAlgoConfiguration(AlgoConfiguration algoConfiguration) {
		this.algoConfiguration = algoConfiguration;
	}

	public AlgoConfiguration getAlgoConfiguration() {
		return algoConfiguration;
	}

	public void setSqnOptions(BerOctetString sqnOptions) {
		this.sqnOptions = sqnOptions;
	}

	public BerOctetString getSqnOptions() {
		return sqnOptions;
	}

	public void setSqnDelta(BerOctetString sqnDelta) {
		this.sqnDelta = sqnDelta;
	}

	public BerOctetString getSqnDelta() {
		return sqnDelta;
	}

	public void setSqnAgeLimit(BerOctetString sqnAgeLimit) {
		this.sqnAgeLimit = sqnAgeLimit;
	}

	public BerOctetString getSqnAgeLimit() {
		return sqnAgeLimit;
	}

	public void setSqnInit(SqnInit sqnInit) {
		this.sqnInit = sqnInit;
	}

	public SqnInit getSqnInit() {
		return sqnInit;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			int sublength;

			if (sqnInit != null) {
				codeLength += sqnInit.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
				os.write(0xa5);
				codeLength += 1;
			}
			
			if (sqnAgeLimit != null) {
				codeLength += sqnAgeLimit.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 4
				os.write(0x84);
				codeLength += 1;
			}
			
			if (sqnDelta != null) {
				codeLength += sqnDelta.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 3
				os.write(0x83);
				codeLength += 1;
			}
			
			if (sqnOptions != null) {
				codeLength += sqnOptions.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				os.write(0x82);
				codeLength += 1;
			}
			
			sublength = algoConfiguration.encode(os, true);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(os, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			os.write(0xa1);
			codeLength += 1;
			
			codeLength += akaHeader.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			os.write(0xa0);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 0)) {
			akaHeader = new PEHeader();
			subCodeLength += akaHeader.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 1)) {
			subCodeLength += length.decode(is);
			algoConfiguration = new AlgoConfiguration();
			subCodeLength += algoConfiguration.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match required sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 2)) {
			sqnOptions = new BerOctetString();
			subCodeLength += sqnOptions.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 3)) {
			sqnDelta = new BerOctetString();
			subCodeLength += sqnDelta.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 4)) {
			sqnAgeLimit = new BerOctetString();
			subCodeLength += sqnAgeLimit.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 5)) {
			sqnInit = new SqnInit();
			subCodeLength += sqnInit.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		sb.append("akaHeader: ").append(akaHeader);
		
		sb.append(", ");
		sb.append("algoConfiguration: ").append(algoConfiguration);
		
		if (sqnOptions != null) {
			sb.append(", ");
			sb.append("sqnOptions: ").append(sqnOptions);
		}
		
		if (sqnDelta != null) {
			sb.append(", ");
			sb.append("sqnDelta: ").append(sqnDelta);
		}
		
		if (sqnAgeLimit != null) {
			sb.append(", ");
			sb.append("sqnAgeLimit: ").append(sqnAgeLimit);
		}
		
		if (sqnInit != null) {
			sb.append(", ");
			sb.append("sqnInit: ").append(sqnInit);
		}
		
		sb.append("}");
		return sb.toString();
	}

}

