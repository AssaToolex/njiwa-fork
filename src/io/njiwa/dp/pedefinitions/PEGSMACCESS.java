/*
 * Kasuku - Open Source eUICC Remote Subscription Management Server
 * 
 * 
 * Copyright (C) 2019 - , Digital Solutions Ltd. - http://www.dsmagic.com
 *
 * Paul Bagyenda <bagyenda@dsmagic.com>
 * 
 * This program is free software, distributed under the terms of
 * the GNU General Public License.
 */ 

/**
 * This class file was automatically generated by jASN1 v1.6.0 (http://www.openmuc.org)
 */

package io.njiwa.dp.pedefinitions;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jasn1.ber.BerIdentifier;
import org.openmuc.jasn1.ber.BerLength;
import org.openmuc.jasn1.ber.types.BerObjectIdentifier;

import java.io.IOException;
import java.io.InputStream;


public class PEGSMACCESS {

	public static final BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	private PEHeader gsmAccessHeader = null;

	private BerObjectIdentifier templateID = null;

	private File dfGsmAccess = null;

	private File efKc = null;

	private File efKcgprs = null;

	private File efCpbcch = null;

	private File efInvscan = null;

	public PEGSMACCESS() {
		id = identifier;
	}

	public PEGSMACCESS(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public void setGsmAccessHeader(PEHeader gsmAccessHeader) {
		this.gsmAccessHeader = gsmAccessHeader;
	}

	public PEHeader getGsmAccessHeader() {
		return gsmAccessHeader;
	}

	public void setTemplateID(BerObjectIdentifier templateID) {
		this.templateID = templateID;
	}

	public BerObjectIdentifier getTemplateID() {
		return templateID;
	}

	public void setDfGsmAccess(File dfGsmAccess) {
		this.dfGsmAccess = dfGsmAccess;
	}

	public File getDfGsmAccess() {
		return dfGsmAccess;
	}

	public void setEfKc(File efKc) {
		this.efKc = efKc;
	}

	public File getEfKc() {
		return efKc;
	}

	public void setEfKcgprs(File efKcgprs) {
		this.efKcgprs = efKcgprs;
	}

	public File getEfKcgprs() {
		return efKcgprs;
	}

	public void setEfCpbcch(File efCpbcch) {
		this.efCpbcch = efCpbcch;
	}

	public File getEfCpbcch() {
		return efCpbcch;
	}

	public void setEfInvscan(File efInvscan) {
		this.efInvscan = efInvscan;
	}

	public File getEfInvscan() {
		return efInvscan;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			if (efInvscan != null) {
				codeLength += efInvscan.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
				os.write(0xa6);
				codeLength += 1;
			}
			
			if (efCpbcch != null) {
				codeLength += efCpbcch.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
				os.write(0xa5);
				codeLength += 1;
			}
			
			if (efKcgprs != null) {
				codeLength += efKcgprs.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
				os.write(0xa4);
				codeLength += 1;
			}
			
			if (efKc != null) {
				codeLength += efKc.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
				os.write(0xa3);
				codeLength += 1;
			}
			
			codeLength += dfGsmAccess.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			os.write(0xa2);
			codeLength += 1;
			
			codeLength += templateID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			os.write(0x81);
			codeLength += 1;
			
			codeLength += gsmAccessHeader.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			os.write(0xa0);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 0)) {
			gsmAccessHeader = new PEHeader();
			subCodeLength += gsmAccessHeader.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 1)) {
			templateID = new BerObjectIdentifier();
			subCodeLength += templateID.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 2)) {
			dfGsmAccess = new File();
			subCodeLength += dfGsmAccess.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 3)) {
			efKc = new File();
			subCodeLength += efKc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 4)) {
			efKcgprs = new File();
			subCodeLength += efKcgprs.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 5)) {
			efCpbcch = new File();
			subCodeLength += efCpbcch.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 6)) {
			efInvscan = new File();
			subCodeLength += efInvscan.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		sb.append("gsmAccessHeader: ").append(gsmAccessHeader);
		
		sb.append(", ");
		sb.append("templateID: ").append(templateID);
		
		sb.append(", ");
		sb.append("dfGsmAccess: ").append(dfGsmAccess);
		
		if (efKc != null) {
			sb.append(", ");
			sb.append("efKc: ").append(efKc);
		}
		
		if (efKcgprs != null) {
			sb.append(", ");
			sb.append("efKcgprs: ").append(efKcgprs);
		}
		
		if (efCpbcch != null) {
			sb.append(", ");
			sb.append("efCpbcch: ").append(efCpbcch);
		}
		
		if (efInvscan != null) {
			sb.append(", ");
			sb.append("efInvscan: ").append(efInvscan);
		}
		
		sb.append("}");
		return sb.toString();
	}

}

