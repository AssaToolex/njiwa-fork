/*
 * Njiwa Open Source Embedded M2M UICC Remote Subscription Manager
 * 
 * 
 * Copyright (C) 2019 - , Digital Solutions Ltd. - http://www.dsmagic.com
 *
 * Njiwa Dev <dev@njiwa.io>
 * 
 * This program is free software, distributed under the terms of
 * the GNU General Public License.
 */ 

/**
 * This class file was automatically generated by jASN1 v1.6.0 (http://www.openmuc.org)
 */

package io.njiwa.dp.pedefinitions;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jasn1.ber.BerIdentifier;
import org.openmuc.jasn1.ber.BerLength;
import org.openmuc.jasn1.ber.types.BerObjectIdentifier;

import java.io.IOException;
import java.io.InputStream;


public class PEOPTCSIM {

	public static final BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	private PEHeader optcsimHeader = null;

	private BerObjectIdentifier templateID = null;

	private File efSsci = null;

	private File efFdn = null;

	private File efSms = null;

	private File efSmsp = null;

	private File efSmss = null;

	private File efSsfc = null;

	private File efSpn = null;

	private File efMdn = null;

	private File efEcc = null;

	private File efMe3gpdopc = null;

	private File ef3gpdopm = null;

	private File efSipcap = null;

	private File efMipcap = null;

	private File efSipupp = null;

	private File efMipupp = null;

	private File efSipsp = null;

	private File efMipsp = null;

	private File efSippapss = null;

	private File efPuzl = null;

	private File efMaxpuzl = null;

	private File efHrpdcap = null;

	private File efHrpdupp = null;

	private File efCsspr = null;

	private File efAtc = null;

	private File efEprl = null;

	private File efBcsmscfg = null;

	private File efBcsmspref = null;

	private File efBcsmstable = null;

	private File efBcsmsp = null;

	private File efBakpara = null;

	private File efUpbakpara = null;

	private File efMmsn = null;

	private File efExt8 = null;

	private File efMmsicp = null;

	private File efMmsup = null;

	private File efMmsucp = null;

	private File efAuthCapability = null;

	private File ef3gcik = null;

	private File efDck = null;

	private File efGid1 = null;

	private File efGid2 = null;

	private File efCdmacnl = null;

	private File efSfEuimid = null;

	private File efEst = null;

	private File efHiddenKey = null;

	private File efLcsver = null;

	private File efLcscp = null;

	private File efSdn = null;

	private File efExt2 = null;

	private File efExt3 = null;

	private File efIci = null;

	private File efOci = null;

	private File efExt5 = null;

	private File efCcp2 = null;

	private File efApplabels = null;

	private File efModel = null;

	private File efRc = null;

	private File efSmscap = null;

	private File efMipflags = null;

	private File ef3gpduppext = null;

	private File efIpv6cap = null;

	private File efTcpconfig = null;

	private File efDgc = null;

	private File efWapbrowsercp = null;

	private File efWapbrowserbm = null;

	private File efMmsconfig = null;

	private File efJdl = null;

	public PEOPTCSIM() {
		id = identifier;
	}

	public PEOPTCSIM(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public void setOptcsimHeader(PEHeader optcsimHeader) {
		this.optcsimHeader = optcsimHeader;
	}

	public PEHeader getOptcsimHeader() {
		return optcsimHeader;
	}

	public void setTemplateID(BerObjectIdentifier templateID) {
		this.templateID = templateID;
	}

	public BerObjectIdentifier getTemplateID() {
		return templateID;
	}

	public void setEfSsci(File efSsci) {
		this.efSsci = efSsci;
	}

	public File getEfSsci() {
		return efSsci;
	}

	public void setEfFdn(File efFdn) {
		this.efFdn = efFdn;
	}

	public File getEfFdn() {
		return efFdn;
	}

	public void setEfSms(File efSms) {
		this.efSms = efSms;
	}

	public File getEfSms() {
		return efSms;
	}

	public void setEfSmsp(File efSmsp) {
		this.efSmsp = efSmsp;
	}

	public File getEfSmsp() {
		return efSmsp;
	}

	public void setEfSmss(File efSmss) {
		this.efSmss = efSmss;
	}

	public File getEfSmss() {
		return efSmss;
	}

	public void setEfSsfc(File efSsfc) {
		this.efSsfc = efSsfc;
	}

	public File getEfSsfc() {
		return efSsfc;
	}

	public void setEfSpn(File efSpn) {
		this.efSpn = efSpn;
	}

	public File getEfSpn() {
		return efSpn;
	}

	public void setEfMdn(File efMdn) {
		this.efMdn = efMdn;
	}

	public File getEfMdn() {
		return efMdn;
	}

	public void setEfEcc(File efEcc) {
		this.efEcc = efEcc;
	}

	public File getEfEcc() {
		return efEcc;
	}

	public void setEfMe3gpdopc(File efMe3gpdopc) {
		this.efMe3gpdopc = efMe3gpdopc;
	}

	public File getEfMe3gpdopc() {
		return efMe3gpdopc;
	}

	public void setEf3gpdopm(File ef3gpdopm) {
		this.ef3gpdopm = ef3gpdopm;
	}

	public File getEf3gpdopm() {
		return ef3gpdopm;
	}

	public void setEfSipcap(File efSipcap) {
		this.efSipcap = efSipcap;
	}

	public File getEfSipcap() {
		return efSipcap;
	}

	public void setEfMipcap(File efMipcap) {
		this.efMipcap = efMipcap;
	}

	public File getEfMipcap() {
		return efMipcap;
	}

	public void setEfSipupp(File efSipupp) {
		this.efSipupp = efSipupp;
	}

	public File getEfSipupp() {
		return efSipupp;
	}

	public void setEfMipupp(File efMipupp) {
		this.efMipupp = efMipupp;
	}

	public File getEfMipupp() {
		return efMipupp;
	}

	public void setEfSipsp(File efSipsp) {
		this.efSipsp = efSipsp;
	}

	public File getEfSipsp() {
		return efSipsp;
	}

	public void setEfMipsp(File efMipsp) {
		this.efMipsp = efMipsp;
	}

	public File getEfMipsp() {
		return efMipsp;
	}

	public void setEfSippapss(File efSippapss) {
		this.efSippapss = efSippapss;
	}

	public File getEfSippapss() {
		return efSippapss;
	}

	public void setEfPuzl(File efPuzl) {
		this.efPuzl = efPuzl;
	}

	public File getEfPuzl() {
		return efPuzl;
	}

	public void setEfMaxpuzl(File efMaxpuzl) {
		this.efMaxpuzl = efMaxpuzl;
	}

	public File getEfMaxpuzl() {
		return efMaxpuzl;
	}

	public void setEfHrpdcap(File efHrpdcap) {
		this.efHrpdcap = efHrpdcap;
	}

	public File getEfHrpdcap() {
		return efHrpdcap;
	}

	public void setEfHrpdupp(File efHrpdupp) {
		this.efHrpdupp = efHrpdupp;
	}

	public File getEfHrpdupp() {
		return efHrpdupp;
	}

	public void setEfCsspr(File efCsspr) {
		this.efCsspr = efCsspr;
	}

	public File getEfCsspr() {
		return efCsspr;
	}

	public void setEfAtc(File efAtc) {
		this.efAtc = efAtc;
	}

	public File getEfAtc() {
		return efAtc;
	}

	public void setEfEprl(File efEprl) {
		this.efEprl = efEprl;
	}

	public File getEfEprl() {
		return efEprl;
	}

	public void setEfBcsmscfg(File efBcsmscfg) {
		this.efBcsmscfg = efBcsmscfg;
	}

	public File getEfBcsmscfg() {
		return efBcsmscfg;
	}

	public void setEfBcsmspref(File efBcsmspref) {
		this.efBcsmspref = efBcsmspref;
	}

	public File getEfBcsmspref() {
		return efBcsmspref;
	}

	public void setEfBcsmstable(File efBcsmstable) {
		this.efBcsmstable = efBcsmstable;
	}

	public File getEfBcsmstable() {
		return efBcsmstable;
	}

	public void setEfBcsmsp(File efBcsmsp) {
		this.efBcsmsp = efBcsmsp;
	}

	public File getEfBcsmsp() {
		return efBcsmsp;
	}

	public void setEfBakpara(File efBakpara) {
		this.efBakpara = efBakpara;
	}

	public File getEfBakpara() {
		return efBakpara;
	}

	public void setEfUpbakpara(File efUpbakpara) {
		this.efUpbakpara = efUpbakpara;
	}

	public File getEfUpbakpara() {
		return efUpbakpara;
	}

	public void setEfMmsn(File efMmsn) {
		this.efMmsn = efMmsn;
	}

	public File getEfMmsn() {
		return efMmsn;
	}

	public void setEfExt8(File efExt8) {
		this.efExt8 = efExt8;
	}

	public File getEfExt8() {
		return efExt8;
	}

	public void setEfMmsicp(File efMmsicp) {
		this.efMmsicp = efMmsicp;
	}

	public File getEfMmsicp() {
		return efMmsicp;
	}

	public void setEfMmsup(File efMmsup) {
		this.efMmsup = efMmsup;
	}

	public File getEfMmsup() {
		return efMmsup;
	}

	public void setEfMmsucp(File efMmsucp) {
		this.efMmsucp = efMmsucp;
	}

	public File getEfMmsucp() {
		return efMmsucp;
	}

	public void setEfAuthCapability(File efAuthCapability) {
		this.efAuthCapability = efAuthCapability;
	}

	public File getEfAuthCapability() {
		return efAuthCapability;
	}

	public void setEf3gcik(File ef3gcik) {
		this.ef3gcik = ef3gcik;
	}

	public File getEf3gcik() {
		return ef3gcik;
	}

	public void setEfDck(File efDck) {
		this.efDck = efDck;
	}

	public File getEfDck() {
		return efDck;
	}

	public void setEfGid1(File efGid1) {
		this.efGid1 = efGid1;
	}

	public File getEfGid1() {
		return efGid1;
	}

	public void setEfGid2(File efGid2) {
		this.efGid2 = efGid2;
	}

	public File getEfGid2() {
		return efGid2;
	}

	public void setEfCdmacnl(File efCdmacnl) {
		this.efCdmacnl = efCdmacnl;
	}

	public File getEfCdmacnl() {
		return efCdmacnl;
	}

	public void setEfSfEuimid(File efSfEuimid) {
		this.efSfEuimid = efSfEuimid;
	}

	public File getEfSfEuimid() {
		return efSfEuimid;
	}

	public void setEfEst(File efEst) {
		this.efEst = efEst;
	}

	public File getEfEst() {
		return efEst;
	}

	public void setEfHiddenKey(File efHiddenKey) {
		this.efHiddenKey = efHiddenKey;
	}

	public File getEfHiddenKey() {
		return efHiddenKey;
	}

	public void setEfLcsver(File efLcsver) {
		this.efLcsver = efLcsver;
	}

	public File getEfLcsver() {
		return efLcsver;
	}

	public void setEfLcscp(File efLcscp) {
		this.efLcscp = efLcscp;
	}

	public File getEfLcscp() {
		return efLcscp;
	}

	public void setEfSdn(File efSdn) {
		this.efSdn = efSdn;
	}

	public File getEfSdn() {
		return efSdn;
	}

	public void setEfExt2(File efExt2) {
		this.efExt2 = efExt2;
	}

	public File getEfExt2() {
		return efExt2;
	}

	public void setEfExt3(File efExt3) {
		this.efExt3 = efExt3;
	}

	public File getEfExt3() {
		return efExt3;
	}

	public void setEfIci(File efIci) {
		this.efIci = efIci;
	}

	public File getEfIci() {
		return efIci;
	}

	public void setEfOci(File efOci) {
		this.efOci = efOci;
	}

	public File getEfOci() {
		return efOci;
	}

	public void setEfExt5(File efExt5) {
		this.efExt5 = efExt5;
	}

	public File getEfExt5() {
		return efExt5;
	}

	public void setEfCcp2(File efCcp2) {
		this.efCcp2 = efCcp2;
	}

	public File getEfCcp2() {
		return efCcp2;
	}

	public void setEfApplabels(File efApplabels) {
		this.efApplabels = efApplabels;
	}

	public File getEfApplabels() {
		return efApplabels;
	}

	public void setEfModel(File efModel) {
		this.efModel = efModel;
	}

	public File getEfModel() {
		return efModel;
	}

	public void setEfRc(File efRc) {
		this.efRc = efRc;
	}

	public File getEfRc() {
		return efRc;
	}

	public void setEfSmscap(File efSmscap) {
		this.efSmscap = efSmscap;
	}

	public File getEfSmscap() {
		return efSmscap;
	}

	public void setEfMipflags(File efMipflags) {
		this.efMipflags = efMipflags;
	}

	public File getEfMipflags() {
		return efMipflags;
	}

	public void setEf3gpduppext(File ef3gpduppext) {
		this.ef3gpduppext = ef3gpduppext;
	}

	public File getEf3gpduppext() {
		return ef3gpduppext;
	}

	public void setEfIpv6cap(File efIpv6cap) {
		this.efIpv6cap = efIpv6cap;
	}

	public File getEfIpv6cap() {
		return efIpv6cap;
	}

	public void setEfTcpconfig(File efTcpconfig) {
		this.efTcpconfig = efTcpconfig;
	}

	public File getEfTcpconfig() {
		return efTcpconfig;
	}

	public void setEfDgc(File efDgc) {
		this.efDgc = efDgc;
	}

	public File getEfDgc() {
		return efDgc;
	}

	public void setEfWapbrowsercp(File efWapbrowsercp) {
		this.efWapbrowsercp = efWapbrowsercp;
	}

	public File getEfWapbrowsercp() {
		return efWapbrowsercp;
	}

	public void setEfWapbrowserbm(File efWapbrowserbm) {
		this.efWapbrowserbm = efWapbrowserbm;
	}

	public File getEfWapbrowserbm() {
		return efWapbrowserbm;
	}

	public void setEfMmsconfig(File efMmsconfig) {
		this.efMmsconfig = efMmsconfig;
	}

	public File getEfMmsconfig() {
		return efMmsconfig;
	}

	public void setEfJdl(File efJdl) {
		this.efJdl = efJdl;
	}

	public File getEfJdl() {
		return efJdl;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			if (efJdl != null) {
				codeLength += efJdl.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 68
				os.write(0x44);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efMmsconfig != null) {
				codeLength += efMmsconfig.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 67
				os.write(0x43);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efWapbrowserbm != null) {
				codeLength += efWapbrowserbm.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 66
				os.write(0x42);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efWapbrowsercp != null) {
				codeLength += efWapbrowsercp.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 65
				os.write(0x41);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efDgc != null) {
				codeLength += efDgc.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 64
				os.write(0x40);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efTcpconfig != null) {
				codeLength += efTcpconfig.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 63
				os.write(0x3f);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efIpv6cap != null) {
				codeLength += efIpv6cap.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 62
				os.write(0x3e);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (ef3gpduppext != null) {
				codeLength += ef3gpduppext.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 61
				os.write(0x3d);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efMipflags != null) {
				codeLength += efMipflags.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 60
				os.write(0x3c);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efSmscap != null) {
				codeLength += efSmscap.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 59
				os.write(0x3b);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efRc != null) {
				codeLength += efRc.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 58
				os.write(0x3a);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efModel != null) {
				codeLength += efModel.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 57
				os.write(0x39);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efApplabels != null) {
				codeLength += efApplabels.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 56
				os.write(0x38);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efCcp2 != null) {
				codeLength += efCcp2.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 55
				os.write(0x37);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efExt5 != null) {
				codeLength += efExt5.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 54
				os.write(0x36);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efOci != null) {
				codeLength += efOci.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 53
				os.write(0x35);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efIci != null) {
				codeLength += efIci.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 52
				os.write(0x34);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efExt3 != null) {
				codeLength += efExt3.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 51
				os.write(0x33);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efExt2 != null) {
				codeLength += efExt2.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 50
				os.write(0x32);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efSdn != null) {
				codeLength += efSdn.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 49
				os.write(0x31);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efLcscp != null) {
				codeLength += efLcscp.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 48
				os.write(0x30);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efLcsver != null) {
				codeLength += efLcsver.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 47
				os.write(0x2f);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efHiddenKey != null) {
				codeLength += efHiddenKey.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 46
				os.write(0x2e);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efEst != null) {
				codeLength += efEst.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 45
				os.write(0x2d);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efSfEuimid != null) {
				codeLength += efSfEuimid.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 44
				os.write(0x2c);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efCdmacnl != null) {
				codeLength += efCdmacnl.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 43
				os.write(0x2b);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efGid2 != null) {
				codeLength += efGid2.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 42
				os.write(0x2a);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efGid1 != null) {
				codeLength += efGid1.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 41
				os.write(0x29);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efDck != null) {
				codeLength += efDck.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 40
				os.write(0x28);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (ef3gcik != null) {
				codeLength += ef3gcik.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 39
				os.write(0x27);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efAuthCapability != null) {
				codeLength += efAuthCapability.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 38
				os.write(0x26);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efMmsucp != null) {
				codeLength += efMmsucp.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 37
				os.write(0x25);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efMmsup != null) {
				codeLength += efMmsup.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 36
				os.write(0x24);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efMmsicp != null) {
				codeLength += efMmsicp.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 35
				os.write(0x23);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efExt8 != null) {
				codeLength += efExt8.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 34
				os.write(0x22);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efMmsn != null) {
				codeLength += efMmsn.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 33
				os.write(0x21);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efUpbakpara != null) {
				codeLength += efUpbakpara.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 32
				os.write(0x20);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efBakpara != null) {
				codeLength += efBakpara.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 31
				os.write(0x1f);
				os.write(0xbf);
				codeLength += 2;
			}
			
			if (efBcsmsp != null) {
				codeLength += efBcsmsp.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 30
				os.write(0xbe);
				codeLength += 1;
			}
			
			if (efBcsmstable != null) {
				codeLength += efBcsmstable.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 29
				os.write(0xbd);
				codeLength += 1;
			}
			
			if (efBcsmspref != null) {
				codeLength += efBcsmspref.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 28
				os.write(0xbc);
				codeLength += 1;
			}
			
			if (efBcsmscfg != null) {
				codeLength += efBcsmscfg.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 27
				os.write(0xbb);
				codeLength += 1;
			}
			
			if (efEprl != null) {
				codeLength += efEprl.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 26
				os.write(0xba);
				codeLength += 1;
			}
			
			if (efAtc != null) {
				codeLength += efAtc.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 25
				os.write(0xb9);
				codeLength += 1;
			}
			
			if (efCsspr != null) {
				codeLength += efCsspr.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 24
				os.write(0xb8);
				codeLength += 1;
			}
			
			if (efHrpdupp != null) {
				codeLength += efHrpdupp.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 23
				os.write(0xb7);
				codeLength += 1;
			}
			
			if (efHrpdcap != null) {
				codeLength += efHrpdcap.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 22
				os.write(0xb6);
				codeLength += 1;
			}
			
			if (efMaxpuzl != null) {
				codeLength += efMaxpuzl.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 21
				os.write(0xb5);
				codeLength += 1;
			}
			
			if (efPuzl != null) {
				codeLength += efPuzl.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 20
				os.write(0xb4);
				codeLength += 1;
			}
			
			if (efSippapss != null) {
				codeLength += efSippapss.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 19
				os.write(0xb3);
				codeLength += 1;
			}
			
			if (efMipsp != null) {
				codeLength += efMipsp.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 18
				os.write(0xb2);
				codeLength += 1;
			}
			
			if (efSipsp != null) {
				codeLength += efSipsp.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 17
				os.write(0xb1);
				codeLength += 1;
			}
			
			if (efMipupp != null) {
				codeLength += efMipupp.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 16
				os.write(0xb0);
				codeLength += 1;
			}
			
			if (efSipupp != null) {
				codeLength += efSipupp.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 15
				os.write(0xaf);
				codeLength += 1;
			}
			
			if (efMipcap != null) {
				codeLength += efMipcap.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 14
				os.write(0xae);
				codeLength += 1;
			}
			
			if (efSipcap != null) {
				codeLength += efSipcap.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 13
				os.write(0xad);
				codeLength += 1;
			}
			
			if (ef3gpdopm != null) {
				codeLength += ef3gpdopm.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 12
				os.write(0xac);
				codeLength += 1;
			}
			
			if (efMe3gpdopc != null) {
				codeLength += efMe3gpdopc.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 11
				os.write(0xab);
				codeLength += 1;
			}
			
			if (efEcc != null) {
				codeLength += efEcc.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
				os.write(0xaa);
				codeLength += 1;
			}
			
			if (efMdn != null) {
				codeLength += efMdn.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
				os.write(0xa9);
				codeLength += 1;
			}
			
			if (efSpn != null) {
				codeLength += efSpn.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
				os.write(0xa8);
				codeLength += 1;
			}
			
			if (efSsfc != null) {
				codeLength += efSsfc.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
				os.write(0xa7);
				codeLength += 1;
			}
			
			if (efSmss != null) {
				codeLength += efSmss.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
				os.write(0xa6);
				codeLength += 1;
			}
			
			if (efSmsp != null) {
				codeLength += efSmsp.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
				os.write(0xa5);
				codeLength += 1;
			}
			
			if (efSms != null) {
				codeLength += efSms.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
				os.write(0xa4);
				codeLength += 1;
			}
			
			if (efFdn != null) {
				codeLength += efFdn.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
				os.write(0xa3);
				codeLength += 1;
			}
			
			if (efSsci != null) {
				codeLength += efSsci.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
				os.write(0xa2);
				codeLength += 1;
			}
			
			codeLength += templateID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			os.write(0x81);
			codeLength += 1;
			
			codeLength += optcsimHeader.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			os.write(0xa0);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 0)) {
			optcsimHeader = new PEHeader();
			subCodeLength += optcsimHeader.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 1)) {
			templateID = new BerObjectIdentifier();
			subCodeLength += templateID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 2)) {
			efSsci = new File();
			subCodeLength += efSsci.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 3)) {
			efFdn = new File();
			subCodeLength += efFdn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 4)) {
			efSms = new File();
			subCodeLength += efSms.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 5)) {
			efSmsp = new File();
			subCodeLength += efSmsp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 6)) {
			efSmss = new File();
			subCodeLength += efSmss.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 7)) {
			efSsfc = new File();
			subCodeLength += efSsfc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 8)) {
			efSpn = new File();
			subCodeLength += efSpn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 9)) {
			efMdn = new File();
			subCodeLength += efMdn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 10)) {
			efEcc = new File();
			subCodeLength += efEcc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 11)) {
			efMe3gpdopc = new File();
			subCodeLength += efMe3gpdopc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 12)) {
			ef3gpdopm = new File();
			subCodeLength += ef3gpdopm.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 13)) {
			efSipcap = new File();
			subCodeLength += efSipcap.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 14)) {
			efMipcap = new File();
			subCodeLength += efMipcap.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 15)) {
			efSipupp = new File();
			subCodeLength += efSipupp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 16)) {
			efMipupp = new File();
			subCodeLength += efMipupp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 17)) {
			efSipsp = new File();
			subCodeLength += efSipsp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 18)) {
			efMipsp = new File();
			subCodeLength += efMipsp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 19)) {
			efSippapss = new File();
			subCodeLength += efSippapss.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 20)) {
			efPuzl = new File();
			subCodeLength += efPuzl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 21)) {
			efMaxpuzl = new File();
			subCodeLength += efMaxpuzl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 22)) {
			efHrpdcap = new File();
			subCodeLength += efHrpdcap.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 23)) {
			efHrpdupp = new File();
			subCodeLength += efHrpdupp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 24)) {
			efCsspr = new File();
			subCodeLength += efCsspr.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 25)) {
			efAtc = new File();
			subCodeLength += efAtc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 26)) {
			efEprl = new File();
			subCodeLength += efEprl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 27)) {
			efBcsmscfg = new File();
			subCodeLength += efBcsmscfg.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 28)) {
			efBcsmspref = new File();
			subCodeLength += efBcsmspref.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 29)) {
			efBcsmstable = new File();
			subCodeLength += efBcsmstable.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 30)) {
			efBcsmsp = new File();
			subCodeLength += efBcsmsp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 31)) {
			efBakpara = new File();
			subCodeLength += efBakpara.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 32)) {
			efUpbakpara = new File();
			subCodeLength += efUpbakpara.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 33)) {
			efMmsn = new File();
			subCodeLength += efMmsn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 34)) {
			efExt8 = new File();
			subCodeLength += efExt8.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 35)) {
			efMmsicp = new File();
			subCodeLength += efMmsicp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 36)) {
			efMmsup = new File();
			subCodeLength += efMmsup.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 37)) {
			efMmsucp = new File();
			subCodeLength += efMmsucp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 38)) {
			efAuthCapability = new File();
			subCodeLength += efAuthCapability.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 39)) {
			ef3gcik = new File();
			subCodeLength += ef3gcik.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 40)) {
			efDck = new File();
			subCodeLength += efDck.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 41)) {
			efGid1 = new File();
			subCodeLength += efGid1.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 42)) {
			efGid2 = new File();
			subCodeLength += efGid2.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 43)) {
			efCdmacnl = new File();
			subCodeLength += efCdmacnl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 44)) {
			efSfEuimid = new File();
			subCodeLength += efSfEuimid.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 45)) {
			efEst = new File();
			subCodeLength += efEst.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 46)) {
			efHiddenKey = new File();
			subCodeLength += efHiddenKey.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 47)) {
			efLcsver = new File();
			subCodeLength += efLcsver.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 48)) {
			efLcscp = new File();
			subCodeLength += efLcscp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 49)) {
			efSdn = new File();
			subCodeLength += efSdn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 50)) {
			efExt2 = new File();
			subCodeLength += efExt2.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 51)) {
			efExt3 = new File();
			subCodeLength += efExt3.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 52)) {
			efIci = new File();
			subCodeLength += efIci.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 53)) {
			efOci = new File();
			subCodeLength += efOci.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 54)) {
			efExt5 = new File();
			subCodeLength += efExt5.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 55)) {
			efCcp2 = new File();
			subCodeLength += efCcp2.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 56)) {
			efApplabels = new File();
			subCodeLength += efApplabels.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 57)) {
			efModel = new File();
			subCodeLength += efModel.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 58)) {
			efRc = new File();
			subCodeLength += efRc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 59)) {
			efSmscap = new File();
			subCodeLength += efSmscap.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 60)) {
			efMipflags = new File();
			subCodeLength += efMipflags.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 61)) {
			ef3gpduppext = new File();
			subCodeLength += ef3gpduppext.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 62)) {
			efIpv6cap = new File();
			subCodeLength += efIpv6cap.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 63)) {
			efTcpconfig = new File();
			subCodeLength += efTcpconfig.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 64)) {
			efDgc = new File();
			subCodeLength += efDgc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 65)) {
			efWapbrowsercp = new File();
			subCodeLength += efWapbrowsercp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 66)) {
			efWapbrowserbm = new File();
			subCodeLength += efWapbrowserbm.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 67)) {
			efMmsconfig = new File();
			subCodeLength += efMmsconfig.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 68)) {
			efJdl = new File();
			subCodeLength += efJdl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		sb.append("optcsimHeader: ").append(optcsimHeader);
		
		sb.append(", ");
		sb.append("templateID: ").append(templateID);
		
		if (efSsci != null) {
			sb.append(", ");
			sb.append("efSsci: ").append(efSsci);
		}
		
		if (efFdn != null) {
			sb.append(", ");
			sb.append("efFdn: ").append(efFdn);
		}
		
		if (efSms != null) {
			sb.append(", ");
			sb.append("efSms: ").append(efSms);
		}
		
		if (efSmsp != null) {
			sb.append(", ");
			sb.append("efSmsp: ").append(efSmsp);
		}
		
		if (efSmss != null) {
			sb.append(", ");
			sb.append("efSmss: ").append(efSmss);
		}
		
		if (efSsfc != null) {
			sb.append(", ");
			sb.append("efSsfc: ").append(efSsfc);
		}
		
		if (efSpn != null) {
			sb.append(", ");
			sb.append("efSpn: ").append(efSpn);
		}
		
		if (efMdn != null) {
			sb.append(", ");
			sb.append("efMdn: ").append(efMdn);
		}
		
		if (efEcc != null) {
			sb.append(", ");
			sb.append("efEcc: ").append(efEcc);
		}
		
		if (efMe3gpdopc != null) {
			sb.append(", ");
			sb.append("efMe3gpdopc: ").append(efMe3gpdopc);
		}
		
		if (ef3gpdopm != null) {
			sb.append(", ");
			sb.append("ef3gpdopm: ").append(ef3gpdopm);
		}
		
		if (efSipcap != null) {
			sb.append(", ");
			sb.append("efSipcap: ").append(efSipcap);
		}
		
		if (efMipcap != null) {
			sb.append(", ");
			sb.append("efMipcap: ").append(efMipcap);
		}
		
		if (efSipupp != null) {
			sb.append(", ");
			sb.append("efSipupp: ").append(efSipupp);
		}
		
		if (efMipupp != null) {
			sb.append(", ");
			sb.append("efMipupp: ").append(efMipupp);
		}
		
		if (efSipsp != null) {
			sb.append(", ");
			sb.append("efSipsp: ").append(efSipsp);
		}
		
		if (efMipsp != null) {
			sb.append(", ");
			sb.append("efMipsp: ").append(efMipsp);
		}
		
		if (efSippapss != null) {
			sb.append(", ");
			sb.append("efSippapss: ").append(efSippapss);
		}
		
		if (efPuzl != null) {
			sb.append(", ");
			sb.append("efPuzl: ").append(efPuzl);
		}
		
		if (efMaxpuzl != null) {
			sb.append(", ");
			sb.append("efMaxpuzl: ").append(efMaxpuzl);
		}
		
		if (efHrpdcap != null) {
			sb.append(", ");
			sb.append("efHrpdcap: ").append(efHrpdcap);
		}
		
		if (efHrpdupp != null) {
			sb.append(", ");
			sb.append("efHrpdupp: ").append(efHrpdupp);
		}
		
		if (efCsspr != null) {
			sb.append(", ");
			sb.append("efCsspr: ").append(efCsspr);
		}
		
		if (efAtc != null) {
			sb.append(", ");
			sb.append("efAtc: ").append(efAtc);
		}
		
		if (efEprl != null) {
			sb.append(", ");
			sb.append("efEprl: ").append(efEprl);
		}
		
		if (efBcsmscfg != null) {
			sb.append(", ");
			sb.append("efBcsmscfg: ").append(efBcsmscfg);
		}
		
		if (efBcsmspref != null) {
			sb.append(", ");
			sb.append("efBcsmspref: ").append(efBcsmspref);
		}
		
		if (efBcsmstable != null) {
			sb.append(", ");
			sb.append("efBcsmstable: ").append(efBcsmstable);
		}
		
		if (efBcsmsp != null) {
			sb.append(", ");
			sb.append("efBcsmsp: ").append(efBcsmsp);
		}
		
		if (efBakpara != null) {
			sb.append(", ");
			sb.append("efBakpara: ").append(efBakpara);
		}
		
		if (efUpbakpara != null) {
			sb.append(", ");
			sb.append("efUpbakpara: ").append(efUpbakpara);
		}
		
		if (efMmsn != null) {
			sb.append(", ");
			sb.append("efMmsn: ").append(efMmsn);
		}
		
		if (efExt8 != null) {
			sb.append(", ");
			sb.append("efExt8: ").append(efExt8);
		}
		
		if (efMmsicp != null) {
			sb.append(", ");
			sb.append("efMmsicp: ").append(efMmsicp);
		}
		
		if (efMmsup != null) {
			sb.append(", ");
			sb.append("efMmsup: ").append(efMmsup);
		}
		
		if (efMmsucp != null) {
			sb.append(", ");
			sb.append("efMmsucp: ").append(efMmsucp);
		}
		
		if (efAuthCapability != null) {
			sb.append(", ");
			sb.append("efAuthCapability: ").append(efAuthCapability);
		}
		
		if (ef3gcik != null) {
			sb.append(", ");
			sb.append("ef3gcik: ").append(ef3gcik);
		}
		
		if (efDck != null) {
			sb.append(", ");
			sb.append("efDck: ").append(efDck);
		}
		
		if (efGid1 != null) {
			sb.append(", ");
			sb.append("efGid1: ").append(efGid1);
		}
		
		if (efGid2 != null) {
			sb.append(", ");
			sb.append("efGid2: ").append(efGid2);
		}
		
		if (efCdmacnl != null) {
			sb.append(", ");
			sb.append("efCdmacnl: ").append(efCdmacnl);
		}
		
		if (efSfEuimid != null) {
			sb.append(", ");
			sb.append("efSfEuimid: ").append(efSfEuimid);
		}
		
		if (efEst != null) {
			sb.append(", ");
			sb.append("efEst: ").append(efEst);
		}
		
		if (efHiddenKey != null) {
			sb.append(", ");
			sb.append("efHiddenKey: ").append(efHiddenKey);
		}
		
		if (efLcsver != null) {
			sb.append(", ");
			sb.append("efLcsver: ").append(efLcsver);
		}
		
		if (efLcscp != null) {
			sb.append(", ");
			sb.append("efLcscp: ").append(efLcscp);
		}
		
		if (efSdn != null) {
			sb.append(", ");
			sb.append("efSdn: ").append(efSdn);
		}
		
		if (efExt2 != null) {
			sb.append(", ");
			sb.append("efExt2: ").append(efExt2);
		}
		
		if (efExt3 != null) {
			sb.append(", ");
			sb.append("efExt3: ").append(efExt3);
		}
		
		if (efIci != null) {
			sb.append(", ");
			sb.append("efIci: ").append(efIci);
		}
		
		if (efOci != null) {
			sb.append(", ");
			sb.append("efOci: ").append(efOci);
		}
		
		if (efExt5 != null) {
			sb.append(", ");
			sb.append("efExt5: ").append(efExt5);
		}
		
		if (efCcp2 != null) {
			sb.append(", ");
			sb.append("efCcp2: ").append(efCcp2);
		}
		
		if (efApplabels != null) {
			sb.append(", ");
			sb.append("efApplabels: ").append(efApplabels);
		}
		
		if (efModel != null) {
			sb.append(", ");
			sb.append("efModel: ").append(efModel);
		}
		
		if (efRc != null) {
			sb.append(", ");
			sb.append("efRc: ").append(efRc);
		}
		
		if (efSmscap != null) {
			sb.append(", ");
			sb.append("efSmscap: ").append(efSmscap);
		}
		
		if (efMipflags != null) {
			sb.append(", ");
			sb.append("efMipflags: ").append(efMipflags);
		}
		
		if (ef3gpduppext != null) {
			sb.append(", ");
			sb.append("ef3gpduppext: ").append(ef3gpduppext);
		}
		
		if (efIpv6cap != null) {
			sb.append(", ");
			sb.append("efIpv6cap: ").append(efIpv6cap);
		}
		
		if (efTcpconfig != null) {
			sb.append(", ");
			sb.append("efTcpconfig: ").append(efTcpconfig);
		}
		
		if (efDgc != null) {
			sb.append(", ");
			sb.append("efDgc: ").append(efDgc);
		}
		
		if (efWapbrowsercp != null) {
			sb.append(", ");
			sb.append("efWapbrowsercp: ").append(efWapbrowsercp);
		}
		
		if (efWapbrowserbm != null) {
			sb.append(", ");
			sb.append("efWapbrowserbm: ").append(efWapbrowserbm);
		}
		
		if (efMmsconfig != null) {
			sb.append(", ");
			sb.append("efMmsconfig: ").append(efMmsconfig);
		}
		
		if (efJdl != null) {
			sb.append(", ");
			sb.append("efJdl: ").append(efJdl);
		}
		
		sb.append("}");
		return sb.toString();
	}

}

