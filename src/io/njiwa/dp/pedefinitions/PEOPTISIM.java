/*
 * Njiwa Open Source Embedded M2M UICC Remote Subscription Manager
 * 
 * 
 * Copyright (C) 2019 - , Digital Solutions Ltd. - http://www.dsmagic.com
 *
 * Njiwa Dev <dev@njiwa.io>
 * 
 * This program is free software, distributed under the terms of
 * the GNU General Public License.
 */ 

/**
 * This class file was automatically generated by jASN1 v1.6.0 (http://www.openmuc.org)
 */

package io.njiwa.dp.pedefinitions;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jasn1.ber.BerIdentifier;
import org.openmuc.jasn1.ber.BerLength;
import org.openmuc.jasn1.ber.types.BerObjectIdentifier;

import java.io.IOException;
import java.io.InputStream;


public class PEOPTISIM {

	public static final BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	private PEHeader optisimHeader = null;

	private BerObjectIdentifier templateID = null;

	private File efPcscf = null;

	private File efSms = null;

	private File efSmsp = null;

	private File efSmss = null;

	private File efSmsr = null;

	private File efGbabp = null;

	private File efGbanl = null;

	private File efNafkca = null;

	private File efUicciari = null;

	public PEOPTISIM() {
		id = identifier;
	}

	public PEOPTISIM(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public void setOptisimHeader(PEHeader optisimHeader) {
		this.optisimHeader = optisimHeader;
	}

	public PEHeader getOptisimHeader() {
		return optisimHeader;
	}

	public void setTemplateID(BerObjectIdentifier templateID) {
		this.templateID = templateID;
	}

	public BerObjectIdentifier getTemplateID() {
		return templateID;
	}

	public void setEfPcscf(File efPcscf) {
		this.efPcscf = efPcscf;
	}

	public File getEfPcscf() {
		return efPcscf;
	}

	public void setEfSms(File efSms) {
		this.efSms = efSms;
	}

	public File getEfSms() {
		return efSms;
	}

	public void setEfSmsp(File efSmsp) {
		this.efSmsp = efSmsp;
	}

	public File getEfSmsp() {
		return efSmsp;
	}

	public void setEfSmss(File efSmss) {
		this.efSmss = efSmss;
	}

	public File getEfSmss() {
		return efSmss;
	}

	public void setEfSmsr(File efSmsr) {
		this.efSmsr = efSmsr;
	}

	public File getEfSmsr() {
		return efSmsr;
	}

	public void setEfGbabp(File efGbabp) {
		this.efGbabp = efGbabp;
	}

	public File getEfGbabp() {
		return efGbabp;
	}

	public void setEfGbanl(File efGbanl) {
		this.efGbanl = efGbanl;
	}

	public File getEfGbanl() {
		return efGbanl;
	}

	public void setEfNafkca(File efNafkca) {
		this.efNafkca = efNafkca;
	}

	public File getEfNafkca() {
		return efNafkca;
	}

	public void setEfUicciari(File efUicciari) {
		this.efUicciari = efUicciari;
	}

	public File getEfUicciari() {
		return efUicciari;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			if (efUicciari != null) {
				codeLength += efUicciari.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
				os.write(0xaa);
				codeLength += 1;
			}
			
			if (efNafkca != null) {
				codeLength += efNafkca.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
				os.write(0xa9);
				codeLength += 1;
			}
			
			if (efGbanl != null) {
				codeLength += efGbanl.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
				os.write(0xa8);
				codeLength += 1;
			}
			
			if (efGbabp != null) {
				codeLength += efGbabp.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
				os.write(0xa7);
				codeLength += 1;
			}
			
			if (efSmsr != null) {
				codeLength += efSmsr.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
				os.write(0xa6);
				codeLength += 1;
			}
			
			if (efSmss != null) {
				codeLength += efSmss.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
				os.write(0xa5);
				codeLength += 1;
			}
			
			if (efSmsp != null) {
				codeLength += efSmsp.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
				os.write(0xa4);
				codeLength += 1;
			}
			
			if (efSms != null) {
				codeLength += efSms.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
				os.write(0xa3);
				codeLength += 1;
			}
			
			if (efPcscf != null) {
				codeLength += efPcscf.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
				os.write(0xa2);
				codeLength += 1;
			}
			
			codeLength += templateID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			os.write(0x81);
			codeLength += 1;
			
			codeLength += optisimHeader.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			os.write(0xa0);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 0)) {
			optisimHeader = new PEHeader();
			subCodeLength += optisimHeader.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 1)) {
			templateID = new BerObjectIdentifier();
			subCodeLength += templateID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 2)) {
			efPcscf = new File();
			subCodeLength += efPcscf.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 3)) {
			efSms = new File();
			subCodeLength += efSms.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 4)) {
			efSmsp = new File();
			subCodeLength += efSmsp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 5)) {
			efSmss = new File();
			subCodeLength += efSmss.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 6)) {
			efSmsr = new File();
			subCodeLength += efSmsr.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 7)) {
			efGbabp = new File();
			subCodeLength += efGbabp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 8)) {
			efGbanl = new File();
			subCodeLength += efGbanl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 9)) {
			efNafkca = new File();
			subCodeLength += efNafkca.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 10)) {
			efUicciari = new File();
			subCodeLength += efUicciari.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		sb.append("optisimHeader: ").append(optisimHeader);
		
		sb.append(", ");
		sb.append("templateID: ").append(templateID);
		
		if (efPcscf != null) {
			sb.append(", ");
			sb.append("efPcscf: ").append(efPcscf);
		}
		
		if (efSms != null) {
			sb.append(", ");
			sb.append("efSms: ").append(efSms);
		}
		
		if (efSmsp != null) {
			sb.append(", ");
			sb.append("efSmsp: ").append(efSmsp);
		}
		
		if (efSmss != null) {
			sb.append(", ");
			sb.append("efSmss: ").append(efSmss);
		}
		
		if (efSmsr != null) {
			sb.append(", ");
			sb.append("efSmsr: ").append(efSmsr);
		}
		
		if (efGbabp != null) {
			sb.append(", ");
			sb.append("efGbabp: ").append(efGbabp);
		}
		
		if (efGbanl != null) {
			sb.append(", ");
			sb.append("efGbanl: ").append(efGbanl);
		}
		
		if (efNafkca != null) {
			sb.append(", ");
			sb.append("efNafkca: ").append(efNafkca);
		}
		
		if (efUicciari != null) {
			sb.append(", ");
			sb.append("efUicciari: ").append(efUicciari);
		}
		
		sb.append("}");
		return sb.toString();
	}

}

