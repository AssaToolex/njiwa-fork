/*
 * Kasuku - Open Source eUICC Remote Subscription Management Server
 * 
 * 
 * Copyright (C) 2019 - , Digital Solutions Ltd. - http://www.dsmagic.com
 *
 * Paul Bagyenda <bagyenda@dsmagic.com>
 * 
 * This program is free software, distributed under the terms of
 * the GNU General Public License.
 */ 

/**
 * This class file was automatically generated by jASN1 v1.6.0 (http://www.openmuc.org)
 */

package io.njiwa.dp.pedefinitions;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jasn1.ber.BerIdentifier;
import org.openmuc.jasn1.ber.BerLength;
import org.openmuc.jasn1.ber.types.BerObjectIdentifier;

import java.io.IOException;
import java.io.InputStream;


public class PEPHONEBOOK {

	public static final BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	private PEHeader phonebookHeader = null;

	private BerObjectIdentifier templateID = null;

	private File dfPhonebook = null;

	private File efPbr = null;

	private File efExt1 = null;

	private File efAas = null;

	private File efGas = null;

	private File efPsc = null;

	private File efCc = null;

	private File efPuid = null;

	private File efIap = null;

	private File efAdn = null;

	private File efPbc = null;

	private File efAnr = null;

	private File efPuri = null;

	private File efEmail = null;

	private File efSne = null;

	private File efUid = null;

	private File efGrp = null;

	private File efCcp1 = null;

	public PEPHONEBOOK() {
		id = identifier;
	}

	public PEPHONEBOOK(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public void setPhonebookHeader(PEHeader phonebookHeader) {
		this.phonebookHeader = phonebookHeader;
	}

	public PEHeader getPhonebookHeader() {
		return phonebookHeader;
	}

	public void setTemplateID(BerObjectIdentifier templateID) {
		this.templateID = templateID;
	}

	public BerObjectIdentifier getTemplateID() {
		return templateID;
	}

	public void setDfPhonebook(File dfPhonebook) {
		this.dfPhonebook = dfPhonebook;
	}

	public File getDfPhonebook() {
		return dfPhonebook;
	}

	public void setEfPbr(File efPbr) {
		this.efPbr = efPbr;
	}

	public File getEfPbr() {
		return efPbr;
	}

	public void setEfExt1(File efExt1) {
		this.efExt1 = efExt1;
	}

	public File getEfExt1() {
		return efExt1;
	}

	public void setEfAas(File efAas) {
		this.efAas = efAas;
	}

	public File getEfAas() {
		return efAas;
	}

	public void setEfGas(File efGas) {
		this.efGas = efGas;
	}

	public File getEfGas() {
		return efGas;
	}

	public void setEfPsc(File efPsc) {
		this.efPsc = efPsc;
	}

	public File getEfPsc() {
		return efPsc;
	}

	public void setEfCc(File efCc) {
		this.efCc = efCc;
	}

	public File getEfCc() {
		return efCc;
	}

	public void setEfPuid(File efPuid) {
		this.efPuid = efPuid;
	}

	public File getEfPuid() {
		return efPuid;
	}

	public void setEfIap(File efIap) {
		this.efIap = efIap;
	}

	public File getEfIap() {
		return efIap;
	}

	public void setEfAdn(File efAdn) {
		this.efAdn = efAdn;
	}

	public File getEfAdn() {
		return efAdn;
	}

	public void setEfPbc(File efPbc) {
		this.efPbc = efPbc;
	}

	public File getEfPbc() {
		return efPbc;
	}

	public void setEfAnr(File efAnr) {
		this.efAnr = efAnr;
	}

	public File getEfAnr() {
		return efAnr;
	}

	public void setEfPuri(File efPuri) {
		this.efPuri = efPuri;
	}

	public File getEfPuri() {
		return efPuri;
	}

	public void setEfEmail(File efEmail) {
		this.efEmail = efEmail;
	}

	public File getEfEmail() {
		return efEmail;
	}

	public void setEfSne(File efSne) {
		this.efSne = efSne;
	}

	public File getEfSne() {
		return efSne;
	}

	public void setEfUid(File efUid) {
		this.efUid = efUid;
	}

	public File getEfUid() {
		return efUid;
	}

	public void setEfGrp(File efGrp) {
		this.efGrp = efGrp;
	}

	public File getEfGrp() {
		return efGrp;
	}

	public void setEfCcp1(File efCcp1) {
		this.efCcp1 = efCcp1;
	}

	public File getEfCcp1() {
		return efCcp1;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			if (efCcp1 != null) {
				codeLength += efCcp1.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 19
				os.write(0xb3);
				codeLength += 1;
			}
			
			if (efGrp != null) {
				codeLength += efGrp.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 18
				os.write(0xb2);
				codeLength += 1;
			}
			
			if (efUid != null) {
				codeLength += efUid.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 17
				os.write(0xb1);
				codeLength += 1;
			}
			
			if (efSne != null) {
				codeLength += efSne.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 16
				os.write(0xb0);
				codeLength += 1;
			}
			
			if (efEmail != null) {
				codeLength += efEmail.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 15
				os.write(0xaf);
				codeLength += 1;
			}
			
			if (efPuri != null) {
				codeLength += efPuri.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 14
				os.write(0xae);
				codeLength += 1;
			}
			
			if (efAnr != null) {
				codeLength += efAnr.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 13
				os.write(0xad);
				codeLength += 1;
			}
			
			if (efPbc != null) {
				codeLength += efPbc.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 12
				os.write(0xac);
				codeLength += 1;
			}
			
			if (efAdn != null) {
				codeLength += efAdn.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 11
				os.write(0xab);
				codeLength += 1;
			}
			
			if (efIap != null) {
				codeLength += efIap.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
				os.write(0xaa);
				codeLength += 1;
			}
			
			if (efPuid != null) {
				codeLength += efPuid.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
				os.write(0xa9);
				codeLength += 1;
			}
			
			if (efCc != null) {
				codeLength += efCc.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
				os.write(0xa8);
				codeLength += 1;
			}
			
			if (efPsc != null) {
				codeLength += efPsc.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
				os.write(0xa7);
				codeLength += 1;
			}
			
			if (efGas != null) {
				codeLength += efGas.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
				os.write(0xa6);
				codeLength += 1;
			}
			
			if (efAas != null) {
				codeLength += efAas.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
				os.write(0xa5);
				codeLength += 1;
			}
			
			if (efExt1 != null) {
				codeLength += efExt1.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
				os.write(0xa4);
				codeLength += 1;
			}
			
			if (efPbr != null) {
				codeLength += efPbr.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
				os.write(0xa3);
				codeLength += 1;
			}
			
			codeLength += dfPhonebook.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			os.write(0xa2);
			codeLength += 1;
			
			codeLength += templateID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			os.write(0x81);
			codeLength += 1;
			
			codeLength += phonebookHeader.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			os.write(0xa0);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 0)) {
			phonebookHeader = new PEHeader();
			subCodeLength += phonebookHeader.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 1)) {
			templateID = new BerObjectIdentifier();
			subCodeLength += templateID.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 2)) {
			dfPhonebook = new File();
			subCodeLength += dfPhonebook.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 3)) {
			efPbr = new File();
			subCodeLength += efPbr.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 4)) {
			efExt1 = new File();
			subCodeLength += efExt1.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 5)) {
			efAas = new File();
			subCodeLength += efAas.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 6)) {
			efGas = new File();
			subCodeLength += efGas.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 7)) {
			efPsc = new File();
			subCodeLength += efPsc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 8)) {
			efCc = new File();
			subCodeLength += efCc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 9)) {
			efPuid = new File();
			subCodeLength += efPuid.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 10)) {
			efIap = new File();
			subCodeLength += efIap.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 11)) {
			efAdn = new File();
			subCodeLength += efAdn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 12)) {
			efPbc = new File();
			subCodeLength += efPbc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 13)) {
			efAnr = new File();
			subCodeLength += efAnr.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 14)) {
			efPuri = new File();
			subCodeLength += efPuri.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 15)) {
			efEmail = new File();
			subCodeLength += efEmail.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 16)) {
			efSne = new File();
			subCodeLength += efSne.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 17)) {
			efUid = new File();
			subCodeLength += efUid.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 18)) {
			efGrp = new File();
			subCodeLength += efGrp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 19)) {
			efCcp1 = new File();
			subCodeLength += efCcp1.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		sb.append("phonebookHeader: ").append(phonebookHeader);
		
		sb.append(", ");
		sb.append("templateID: ").append(templateID);
		
		sb.append(", ");
		sb.append("dfPhonebook: ").append(dfPhonebook);
		
		if (efPbr != null) {
			sb.append(", ");
			sb.append("efPbr: ").append(efPbr);
		}
		
		if (efExt1 != null) {
			sb.append(", ");
			sb.append("efExt1: ").append(efExt1);
		}
		
		if (efAas != null) {
			sb.append(", ");
			sb.append("efAas: ").append(efAas);
		}
		
		if (efGas != null) {
			sb.append(", ");
			sb.append("efGas: ").append(efGas);
		}
		
		if (efPsc != null) {
			sb.append(", ");
			sb.append("efPsc: ").append(efPsc);
		}
		
		if (efCc != null) {
			sb.append(", ");
			sb.append("efCc: ").append(efCc);
		}
		
		if (efPuid != null) {
			sb.append(", ");
			sb.append("efPuid: ").append(efPuid);
		}
		
		if (efIap != null) {
			sb.append(", ");
			sb.append("efIap: ").append(efIap);
		}
		
		if (efAdn != null) {
			sb.append(", ");
			sb.append("efAdn: ").append(efAdn);
		}
		
		if (efPbc != null) {
			sb.append(", ");
			sb.append("efPbc: ").append(efPbc);
		}
		
		if (efAnr != null) {
			sb.append(", ");
			sb.append("efAnr: ").append(efAnr);
		}
		
		if (efPuri != null) {
			sb.append(", ");
			sb.append("efPuri: ").append(efPuri);
		}
		
		if (efEmail != null) {
			sb.append(", ");
			sb.append("efEmail: ").append(efEmail);
		}
		
		if (efSne != null) {
			sb.append(", ");
			sb.append("efSne: ").append(efSne);
		}
		
		if (efUid != null) {
			sb.append(", ");
			sb.append("efUid: ").append(efUid);
		}
		
		if (efGrp != null) {
			sb.append(", ");
			sb.append("efGrp: ").append(efGrp);
		}
		
		if (efCcp1 != null) {
			sb.append(", ");
			sb.append("efCcp1: ").append(efCcp1);
		}
		
		sb.append("}");
		return sb.toString();
	}

}

