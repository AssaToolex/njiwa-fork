/*
 * Kasuku - Open Source eUICC Remote Subscription Management Server
 * 
 * 
 * Copyright (C) 2019 - , Digital Solutions Ltd. - http://www.dsmagic.com
 *
 * Paul Bagyenda <bagyenda@dsmagic.com>
 * 
 * This program is free software, distributed under the terms of
 * the GNU General Public License.
 */ 

/**
 * This class file was automatically generated by jASN1 v1.6.0 (http://www.openmuc.org)
 */

package io.njiwa.dp.pedefinitions;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jasn1.ber.BerIdentifier;
import org.openmuc.jasn1.ber.BerLength;
import org.openmuc.jasn1.ber.types.BerOctetString;

import java.io.IOException;
import java.io.InputStream;


public class ProprietaryInfo {

	public static final BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	private BerOctetString specialFileInformation = null;

	private BerOctetString fillPattern = null;

	private BerOctetString repeatPattern = null;

	public ProprietaryInfo() {
		id = identifier;
	}

	public ProprietaryInfo(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public void setSpecialFileInformation(BerOctetString specialFileInformation) {
		this.specialFileInformation = specialFileInformation;
	}

	public BerOctetString getSpecialFileInformation() {
		return specialFileInformation;
	}

	public void setFillPattern(BerOctetString fillPattern) {
		this.fillPattern = fillPattern;
	}

	public BerOctetString getFillPattern() {
		return fillPattern;
	}

	public void setRepeatPattern(BerOctetString repeatPattern) {
		this.repeatPattern = repeatPattern;
	}

	public BerOctetString getRepeatPattern() {
		return repeatPattern;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			if (repeatPattern != null) {
				codeLength += repeatPattern.encode(os, false);
				// write tag: PRIVATE_CLASS, PRIMITIVE, 2
				os.write(0xc2);
				codeLength += 1;
			}
			
			if (fillPattern != null) {
				codeLength += fillPattern.encode(os, false);
				// write tag: PRIVATE_CLASS, PRIMITIVE, 1
				os.write(0xc1);
				codeLength += 1;
			}
			
			if (specialFileInformation != null) {
				codeLength += specialFileInformation.encode(os, false);
				// write tag: PRIVATE_CLASS, PRIMITIVE, 0
				os.write(0xc0);
				codeLength += 1;
			}
			
			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.PRIMITIVE, 0)) {
			specialFileInformation = new BerOctetString();
			subCodeLength += specialFileInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.PRIMITIVE, 1)) {
			fillPattern = new BerOctetString();
			subCodeLength += fillPattern.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.PRIMITIVE, 2)) {
			repeatPattern = new BerOctetString();
			subCodeLength += repeatPattern.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		boolean firstSelectedElement = true;
		if (specialFileInformation != null) {
			sb.append("specialFileInformation: ").append(specialFileInformation);
			firstSelectedElement = false;
		}
		
		if (fillPattern != null) {
			if (!firstSelectedElement) {
				sb.append(", ");
			}
			sb.append("fillPattern: ").append(fillPattern);
			firstSelectedElement = false;
		}
		
		if (repeatPattern != null) {
			if (!firstSelectedElement) {
				sb.append(", ");
			}
			sb.append("repeatPattern: ").append(repeatPattern);
			firstSelectedElement = false;
		}
		
		sb.append("}");
		return sb.toString();
	}

}

